#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  # if $SOURCE was a relative symlink, resolve it relative to the path where the symlink file was located
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
BOLT_DIR="$( cd -P "$( dirname "$SOURCE" )/.." && pwd )"

BOLT_VERSION=$(cat "$BOLT_DIR/VERSION")

BOLT_OPERATION=$1
# used to track multiple operations, helps to know when to show verbose output hint
BOLT_MULTI_OPERATION=0

if [ "$BOLT_OPERATION" == "verbose" ];then
  # shellcheck disable=SC2034
  BOLT_VERBOSE=1
  BOLT_OPERATION=$2
  shift
fi

for file in $BOLT_DIR/lib/*.sh; do
  . "$file"
done

help() {
  version
  echo -e "\ncommands:"
  echo "types   - view descriptions for supported assertion types"
  echo "list    - list assertion types (for bash autocomplete)"
  echo "status  - check state of a bolt config"
  echo "              example: bolt status config.sh"
  echo "satisfy - attempt to satisfy assertions in a bolt config"
  echo "              example: bolt satisfy config.sh"
  echo "check   - check state of a single bolt command"
  echo "              example: bolt check dir foo"
  echo "do      - satisfy a single bolt command"
  echo "              example: bolt do dir foo"
  echo ""
  echo "add \"verbose\" before an assertion to get more"
  echo "detail from the operation output if available"
  echo "              example: bolt verbose check yum nano"
  echo ""
}

version() {
  echo "bolt $BOLT_VERSION"
}

# be lenient about incorrectly running a one line assertion when wanting to
# run bolt against a file (so no other arguments)
# ie allow "bolt check somefile" instead of "bolt status somefile" if somefile exists
if [[ -z $3 && -f "$2" ]];then
  case $BOLT_OPERATION in
    'do')BOLT_OPERATION="satisfy";;
    check)BOLT_OPERATION="status";;
  esac
fi

# shellcheck disable=SC2086,SC2048,SC2046,SC1010
case $BOLT_OPERATION in
  status|satisfy)
    BOLT_MULTI_OPERATION=1
    [ "$BOLT_OPERATION" == "satisfy" ] && BOLT_VERBOSE=1
    if [ -f "$2" ];then
      source "$2"; reporter
    else
      echo "Error: cannot read bolt config \"$2\""
      exit 1
    fi
    ;;
  do)
    BOLT_OPERATION="satisfy"
    BOLT_VERBOSE=1
    shift;ok $*;
    # new line needed to clear print line
    echo -e "\n"
    ;;
  check)
    BOLT_OPERATION="status"
    shift;ok $*
    # new line needed to clear print line
    echo -e "\n"
    ;;
  # generate a list of types for tab autocompletion
  list)
    list=""
    for type in $BOLT_DIR/types/*.sh; do
      list="$list$(basename ${type%.*}) "
    done
    echo "$list"
    ;;
  # print help descriptions for supported types
  types)
    if [ -z $2 ];then
      # for a single type
      for type in $BOLT_DIR/types/*.sh; do
        echo "* $(basename ${type%.*})" && . $type 'desc'
        echo ""
      done
    else
      # for all types
      type=$BOLT_DIR/types/$2.sh
      if [ -f "$type" ];then
        . $type 'desc'
      else
        echo "unsupported type \"$2\""
        exit 1
      fi
    fi
    ;;
  version) version;;
  help|?|*) help;;
esac
